#!/usr/bin/env python
import os
import sys
import math
import subprocess
import time
import calendar
import json
import re
import argparse


def get_video_info(filename):
    subproc = subprocess.run(['ffprobe', '-of', 'json', '-show_entries', 'stream:format', filename], capture_output=True)
    return json.loads(subproc.stdout)

def vinfo_time_to_epoch(video_info):
    ctime = time.strptime( video_info['streams'][0]['tags']['creation_time'], '%Y-%m-%dT%H:%M:%S.%fZ')
    #return calendar.timegm(ctime)
    return time.mktime(ctime)

mre = re.compile('^GL(?P<n>\d{6}).LRV', re.I)

def file_name_normalize(filename):
    ret = filename
    basename = os.path.basename(filename)
    m = mre.match(basename)
    if m:
        ret = os.path.join( os.path.dirname(filename), f'GX{m.group("n")}.MP4' )
    return ret

class Avidemux:
    '''
    Class to emulate avidemux, but in real, it just uses avidemux, and wrap all segment stuff into ffmpeg commands
    Helps applying timestamp onto SJCam recorded videos, so can be used for gpx2video.
    '''
    videos = []
    segments = 0
    concatbuffer = {
            'files': [],
            'inputfile': None,
            'outputfile': None,
            'dfile': None,
            'sdiff': None,
            'creation_time': None
            }

    def __init__(self): pass

    def loadVideo(self, filename):
        _filename = file_name_normalize(filename)
        video = get_video_info(_filename)
        video.setdefault('filename', _filename)
        if not args.sliceonly:
            stime = vinfo_time_to_epoch(video)
            stime += args.diff
            video.setdefault('stime', stime)
        self.videos.append(video)
        return True

    def appendVideo(self, filename):
        _filename = file_name_normalize(filename)
        video = get_video_info(_filename)
        video.setdefault('filename', _filename)
        previous = self.videos[-1]
        if not args.sliceonly:
            stime = previous['stime'] + float(previous['streams'][0]['duration'])
            video.setdefault('stime', stime)
        self.videos.append(video)
        return True
        

    def flushConcatBuffer(self):
        inputfile = self.concatbuffer['inputfile']
        outputfile = self.concatbuffer['outputfile']
        dfile = self.concatbuffer['dfile']
        sdiff = self.concatbuffer['sdiff']
        creation_time = self.concatbuffer['creation_time']

        if inputfile is not None:
            args.trace and print(f' -> Debug flushing: lf: {len(self.concatbuffer["files"])} concatbuffer: {self.concatbuffer}', file=sys.stderr)

            with open(inputfile, 'w') as winputfile:
                for cinfile in self.concatbuffer['files']:
                    cinfilename = cinfile['filename']
                    winputfile.write(f"file '{cinfilename}'\n")
                    for k in cinfile.keys():
                        if k != 'filename':
                            winputfile.write(f'{k} {cinfile[k]}\n')

            duration = float(self.concatbuffer['durms']/1000000)
            if math.ceil(duration)-duration < args.roundup:
                duration = math.ceil(duration)
            duration = str(duration)

            if args.blank:
                with open(dfile, 'w') as wdfile:
                    wdfile.write(f'l_sdiff={sdiff}\nl_blank=yes\nl_duration={duration}\n')
                print(f"ffmpeg -i {args.blank} -c copy -t {duration} -metadata 'creation_time={creation_time}' {outputfile}")
            else:
                with open(dfile, 'w') as wdfile:
                    wdfile.write(f'l_sdiff={sdiff}\nl_blank=no\nl_duration={duration}\n')
                if len(self.concatbuffer['files']) == 1:
                    cbfile = self.concatbuffer['files'][0]
                    infilename = cbfile['filename']
                    durargs = list()
                    ss = 0
                    if 'inpoint' in cbfile:
                        ss = cbfile['inpoint']
                        durargs.append(f'-ss {ss}')
                    if 'outpoint' in cbfile:
                        durargs.append(f'-t {cbfile["outpoint"]-ss}')
                    print(f"ffmpeg -i {infilename} {args.filter} -metadata 'creation_time={creation_time}' {' '.join(durargs)} {outputfile}")
                else:
                    print(f"ffmpeg -f concat -safe 0 -i {inputfile} {args.filter} -metadata 'creation_time={creation_time}' {outputfile}")

        self.concatbuffer['inputfile'] = None
        self.concatbuffer['files'] = []
        self.concatbuffer['outfile'] = None
        self.concatbuffer['dfile'] = None
        self.concatbuffer['sdiff'] = None


    def initConcatBuffer(self, filename, startms, creation_time, durms, sdiff):
        args.trace and print(f' -> debug: initConcatBuffer, starts with flushing, initializing with filename: {filename} startms: {startms} creation_time: {creation_time} durms: {durms}', file=sys.stderr)
        self.flushConcatBuffer()
        if args.prefix is None:
            prefix = args.pyfile.name[:-3]
        else:
            prefix = args.prefix
        prefix = os.path.join( args.outdir, prefix)
        self.concatbuffer['outputfile'] = prefix + ( f'%0{args.numdigits}d' % self.segments ) + '.mp4'
        self.concatbuffer['inputfile'] = prefix + ( f'%0{args.numdigits}d' % self.segments ) + '.input.txt'
        self.concatbuffer['dfile'] = prefix + ( f'%0{args.numdigits}d' % self.segments ) + '.dsh'
        self.concatbuffer['files'] = [ {'filename': filename, 'inpoint': str(float(startms/1000000))} ]
        self.concatbuffer['creation_time'] = creation_time
        self.concatbuffer['durms'] = durms
        self.concatbuffer['sdiff'] = sdiff
        #print(f'debug: initConcatBuffer: filename: {filename}, startms: {startms}, creation_time: {creation_time}, concatbuffer: {self.concatbuffer}', file=sys.stderr)
        #print(f'debug: initConcatBuffer: concatbuffer: {self.concatbuffer}', file=sys.stderr)
        self.segments -= 1


    def appendConcatBuffer(self, filename, durms, midslice):
        newentry = dict()
        newentry.setdefault('filename', filename)
        if midslice:
            self.segments -= 1
        else:
            newentry.setdefault('outpoint', str(float(durms/1000000)))
        self.concatbuffer['files'].append(newentry)
        self.concatbuffer['durms'] += durms

    def isConcatBufferStarted(self):
        return self.concatbuffer['inputfile'] is not None

    def addSegment(self, vidno, startms, durms):
        if args.prefix is None:
            prefix = args.pyfile.name[:-3]
        else:
            prefix = args.prefix
        prefix = os.path.join(args.outdir, prefix)
        newfilename = prefix + ( f'%0{args.numdigits}d' % self.segments ) + '.mp4'
        newinputfilename = prefix + ( f'%0{args.numdigits}d' % self.segments ) + '.input.txt'
        newdfilename = prefix + ( f'%0{args.numdigits}d' % self.segments ) + '.dsh'
        if args.sliceonly:
            print(f"ffmpeg -i {self.videos[vidno]['filename']} {args.filter} -ss {startms/1000000} -t {durms/1000000} {newfilename}")
        else:
            newstartts = self.videos[vidno]['stime'] + startms/1000000
            newstartdiff = self.videos[vidno]['stime'] + startms/1000000 - self.videos[0]['stime']
            newstart = time.strftime('%Y-%m-%dT%H:%M:%S.000000Z', time.localtime(newstartts))
            sdiff = f'{newstartdiff:0.3f}'
            if args.diff_mode:
                if os.path.exists(newfilename):
                    slice_info = get_video_info(newfilename)
                    slice_ctime = vinfo_time_to_epoch(slice_info)
                    print(f'{newfilename} diff: {slice_ctime-newstartts}', file=sys.stderr)
                    print(f'slice_ctime: {slice_ctime}, newstartts: {newstartts}', file=sys.stderr)
                    print(f'. <( gpdemux -o rsrc -d {slice_ctime-newstartts} {args.pyfile.name} )')
                else:
                    print(f'file doesn\'t exist: {newfilename}', file=sys.stderr)
            else:
                if args.sourcedir is None:
                    # If Segment ends on camera segment's end:
                    args.trace and print(f" -> Second condition check: durms {durms} startms: {startms} viduration: {self.videos[vidno]['streams'][0]['duration']}", file=sys.stderr)
                    if startms == 0 and self.isConcatBufferStarted():
                        args.trace and print(f" -> debug: calling appendConcatBuffer: filename: {self.videos[vidno]['filename']}, durms: {durms}, duration: {self.videos[vidno]['streams'][0]['duration']}, concatbuffer: {self.concatbuffer}", file=sys.stderr)
                        self.appendConcatBuffer(self.videos[vidno]['filename'], durms, bool(float(self.videos[vidno]['streams'][0]['duration']) == float(durms/1000000)))
                    elif float(self.videos[vidno]['streams'][0]['duration']) == float((startms + durms)/1000000) :
                        self.initConcatBuffer(self.videos[vidno]['filename'], startms, newstart, durms, sdiff)
                        #print(f'# {newfilename} ends on file, maybe need to append with next segment', file=sys.stderr)
                    # If Segments starts on camera segment, might need to append to concatbuffer
                    else:
                        args.trace and print(' -> debug: else branch', file=sys.stderr)
                        self.flushConcatBuffer()
                        if math.ceil(durms/1000000)-durms/1000000 < args.roundup:
                            durms = int(math.ceil(durms/1000000)*1000000)
                        if args.blank:
                            with open(newinputfilename, 'w') as winputfile:
                                winputfile.write(f"file '{self.videos[vidno]['filename']}'\n")
                                inpoint = str(float(startms/1000000))
                                outpoint = str(float((startms+durms)/1000000))
                                winputfile.write(f"inpoint {inpoint}\n")
                                winputfile.write(f"outpoint {outpoint}\n")
                            with open(newdfilename, 'w') as dfile:
                                dfile.write(f'l_sdiff={sdiff}\nl_blank=yes\nl_duration={durms/1000000}\n')
                            print(f"ffmpeg -i {args.blank} -c copy -metadata 'creation_time={newstart}' -t {durms/1000000} {newfilename}")
                        else:
                            with open(newdfilename, 'w') as dfile:
                                dfile.write(f'l_sdiff={sdiff}\nl_blank=no\nl_duration={durms/1000000}\n')
                            print(f"ffmpeg -i {self.videos[vidno]['filename']} {args.filter} -metadata 'creation_time={newstart}' -ss {startms/1000000} -t {durms/1000000} {newfilename}")
                else:
                    sourcefile = os.path.join(args.sourcedir, newfilename)
                    print(f"ffmpeg -i {sourcefile} -c copy -metadata 'creation_time={newstart}' {newfilename}")
        self.segments += 1

    def clearSegments(self):
        if 'SJTZ' in os.environ:
            os.environ['TZ'] = os.environ['SJTZ']
            time.tzset()

    def setHDRConfig(self, *args): pass
    def audioSetDrc2(self, *args): pass
    def audioSetEq(self, *args): pass
    def audioSetChannelGains(self, *args): pass
    def audioSetChannelDelays(self, *args): pass
    def audioSetChannelRemap(self, *args): pass
    def setPostProc(self, *argv, **kw): pass
    def videoCodec(self, *argv, **kw): self.flushConcatBuffer()
    def audioClearTracks(self, *argv, **kw): pass
    def setSourceTrackLanguage(self, *argv, **kw) : pass
    def audioTotalTracksCount(self, *argv, **kw) : return 1
    def audioAddTrack(self, *argv, **kw) : pass
    def audioCodec(self, *argv, **kw) : pass
    def audioSetDrc(self, *argv, **kw) : pass
    def audioSetShift(self, *argv, **kw) : pass
    def setContainer(self, *argv, **kw) : pass


def rounding(x):
    try:
        x = float(x)
    except ValueError:
        raise argparse.ArgumentTypeError(f'{x} not a floating point literal')
    if x < 0.0 or x > 0.5:
        raise argparse.ArgumentTypeError(f'{x} not in range [0, 0.5]')
    return x

parser = argparse.ArgumentParser(description='''Helps processing GoPro recordings:

  This script adjusts GoPro recorded videos\' creation_time, and make it
  usable for gpx2video.
  The idea is simple: use gpscan to create .py files what can be loaded into 
  avidemux as project files, then do the editing, save it and run this script
  on the generated project files, which are technically python code.
  You run that python code with this script, which emulates a dummy Avidemux
  class. The dummy class will print you ffmpeg commands, so that will result
  new slices, what you can pass to gpx2video one by one, than concatenate.
  I mostly use this with my GoPro 12, which don't have an internal GPS, so it's also
  helpful, that I can use a "diff" option, to adjust the recording's creation_time to
  the actual precise GPS time.''', formatter_class=argparse.RawDescriptionHelpFormatter)

parser.add_argument('-d', '--diff', default=os.environ.get('SJDEMUX_DIFF', 0), type=float, help='Time diff to adjust the counted creation time')
parser.add_argument('-D', '--diff-mode', action='store_true', help='Instead of printing the commands, it calculates what diff was provided earlier creating the files')
parser.add_argument('-p', '--prefix', default=os.environ.get('SJDEMUX_PREFIX', None), help='Filename prefix for the resulting commands')
parser.add_argument('-S', '--sourcedir', default=None, help='Source dir of pre-processed files')
parser.add_argument('-n', '--numdigits', default=3, help='Number of digits used for slices in the resulting commands')
parser.add_argument('-s', '--sliceonly', action='store_true', help='Do only the slicing, no need for metadata fixing')
parser.add_argument('-f', '--filter', default=os.environ.get('SJFILTER', '-codec copy'), help='Filter. Default: -codec copy')
parser.add_argument('-b', '--blank', default=os.environ.get('SJBLANK', None), help='Blank mp4 file to use as input in the generated commands')
parser.add_argument('-o', '--outdir', default=os.environ.get('SJOUTDIR', 'fsrc'), help='Output directory to put the resulting mp4 and input.txt files to')
parser.add_argument('-t', '--trace', action='store_true', help='Print tracing information useful for debug')
parser.add_argument('-r', '--roundup', type=rounding, default=0.05, help="Round up slice duration, if it's closer to the int than this number default: 0.05, allowed: [0, 0.5]")
parser.add_argument('pyfile', type=argparse.FileType('r'), help='avidemux exported .py file')
args = parser.parse_args()

if not os.path.isdir(args.outdir):
    os.mkdir(args.outdir)

exec(args.pyfile.read())
