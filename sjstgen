#!/usr/bin/env python

import sys
import os
import uuid
import jinja2
import argparse

parser = argparse.ArgumentParser(description='''Process soundtrack.txt, and generate a .kdenlive file as a result''')
parser.add_argument('-v', '--verbose', action='store_true', help='Print verbose / debug messages for diagnostic purposes')
parser.add_argument('videofile', type=argparse.FileType('r'), help='The first video in the project bin')
parser.add_argument('soundtrackfile', type=argparse.FileType('r'), help='Simple text file with listing filenames to be added to the soundtrack')

soundtrack_template = os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])), 'soundtrack.j2')

args = parser.parse_args()

soundtrack_path = os.path.dirname(os.path.realpath(args.soundtrackfile.name))

templateargs = dict()

templateargs.setdefault('s1uuid', str(uuid.uuid4()))
templateargs.setdefault('rootdir', soundtrack_path)
templateargs.setdefault('inputfiles', list())

templateargs['inputfiles'].append(args.videofile.name)
lastfile = ''
for line in args.soundtrackfile:
    if line.startswith('/'):
        # Remove the 'Playing: ' or whatever garbage string prefixes the filenames
        filename = line.rstrip()
        if filename != lastfile:
            templateargs['inputfiles'].append(filename)
        lastfile = filename

outfile = args.soundtrackfile.name.rsplit('.', 1)[0] + '.kdenlive'
if args.verbose:
    print(f'vf: {args.videofile.name}')
    print(f'stf: {args.soundtrackfile.name}')
    print(f'template: {soundtrack_template}')
    print(f'templateargs: {templateargs}')
    print(f'outfile: {outfile}')

env = jinja2.Environment()
with open(soundtrack_template, 'r') as t:
    template = env.from_string(t.read())

with open(outfile, 'w') as ouf:
    ouf.write(template.render(**templateargs))
